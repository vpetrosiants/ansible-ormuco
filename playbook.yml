---

- name: create EC2
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: create security group
      ec2_group:
        name: "{{ security }}"
        description: "security group"
        access_key: "{{ ec2_access_key }}"
        secret_key : "{{ ec2_secret_key }}"
        region: "{{ region }}"
        rules: 
          - proto: tcp #ssh
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp #http
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp #https
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: firewall_rules
      
    - name: create EC2 instace
      ec2: 
        key_name: "{{ key_name }}"
        region: "{{ region }}"
        aws_access_key: "{{ ec2_access_key }}"
        aws_secret_key : "{{ ec2_secret_key }}"   
        group_id: "{{ firewall_rules.group_id }}"
        instance_type: "{{ type }}"
        image: "{{ ami }}"
        wait: yes
        instance_tags:
            Name: web_server
            env: "{{ tagname }}"
        count_tag: env
        exact_count: "{{ instance }}"
        vpc_subnet_id: "{{ subnet }}"
        assign_public_ip: yes
      register: ec2
    
    - name: wait for the server
      wait_for: host={{  item.public_dns_name }} port=22 delay=10 timeout=180 state=started
      with_items: "{{ec2.tagged_instances}}"
    
    - name: wait server ip addresses
      add_host: host={{  item.public_ip }} groupname=launched
      with_items: "{{ ec2.tagged_instances }}"
      
           
- name: webserver
  hosts: launched
  remote_user: ubuntu
  become: true
  become_user: root
  gather_facts: false
  roles: 
    - web
    - php
    - database
    - app